{"ast":null,"code":"var _jsxFileName = \"/Users/vadimchaikin/WebstormProjects/snowshop/src/containers/Auth/Login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField } from '@material-ui/core';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport React, { useContext, useState } from 'react';\nimport { authContext } from '../../../contexts/AuthContext';\nimport classes from '../Register/Register.module.css';\nimport * as Yup from \"yup\";\nimport TextError from '../../../components/TextError';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const {\n    loginUser\n  } = useContext(authContext);\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().required(\"Обязательное поле!\").email('Неверный формат email!'),\n    password: Yup.string().required(\"Обязательное поле!\").min(6, 'Требуется как минимум 6 символов!')\n  });\n\n  const notify = email => toast(`Вы вошли в систему как ${email}!`, {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnFocusLoss: true,\n    draggable: true,\n    pauseOnHover: true,\n    type: 'success'\n  });\n\n  const notifyError = () => toast('Неверные данные или несуществующий юзер!', {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnFocusLoss: true,\n    draggable: true,\n    pauseOnHover: true,\n    type: 'error'\n  });\n\n  const history = useHistory();\n\n  const onSubmit = (values, actions) => {\n    const {\n      email,\n      password\n    } = values;\n    loginUser(email, password).then(() => {\n      notify(email);\n      history.push('/home');\n    }).catch(e => {\n      notifyError();\n    });\n    actions.resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      children: () => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 30\n          },\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"email\",\n            name: \"email\",\n            fullWidth: true,\n            variant: \"outlined\",\n            placeholder: \"Email\",\n            as: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            component: TextError,\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 30\n          },\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"password\",\n            name: \"password\",\n            fullWidth: true,\n            variant: \"outlined\",\n            placeholder: \"Password\",\n            as: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            component: TextError,\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"primary\",\n          variant: \"contained\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"AEeXbOfjv7E9Q6zHLAe3gPT13bY=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/vadimchaikin/WebstormProjects/snowshop/src/containers/Auth/Login/LoginForm.js"],"names":["Button","TextField","ErrorMessage","Field","Form","Formik","React","useContext","useState","authContext","classes","Yup","TextError","toast","useHistory","LoginForm","loginUser","initialValues","email","password","validationSchema","object","string","required","min","notify","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","type","notifyError","history","onSubmit","values","actions","then","push","catch","e","resetForm","form","marginBottom"],"mappings":"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","sourcesContent":["import { Button, TextField } from '@material-ui/core';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport React, { useContext, useState } from 'react';\nimport { authContext } from '../../../contexts/AuthContext';\nimport classes from '../Register/Register.module.css';\nimport * as Yup from \"yup\";\nimport TextError from '../../../components/TextError';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router-dom';\n\nexport default function LoginForm() {\n\n    const { loginUser } = useContext(authContext);\n\n    const initialValues = {\n        email: \"\",\n        password: \"\",\n    }\n\n    const validationSchema = Yup.object({\n        email: Yup.string().required(\"Обязательное поле!\").email('Неверный формат email!'),\n        password: Yup.string().required(\"Обязательное поле!\").min(6, 'Требуется как минимум 6 символов!'),\n    });\n\n    const notify = (email) => toast(`Вы вошли в систему как ${email}!`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true,\n        type: 'success'\n    });\n\n    const notifyError = () => toast('Неверные данные или несуществующий юзер!', {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true,\n        type: 'error'\n    });\n\n    const history = useHistory();\n\n    const onSubmit = (values, actions) => {\n        const { email, password } = values;\n\n        loginUser(email, password).then(() => {\n            notify(email);\n            history.push('/home');\n        }).catch(e => {\n            notifyError();\n        })\n\n        actions.resetForm();\n    }\n\n    return (\n        <div>\n\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={onSubmit}\n            >\n                {() => (\n                    <Form className={classes.form}>\n\n                        <h1>\n                            Login\n                        </h1>\n\n                        <div style={{marginBottom: 30}}>\n                            <Field\n                                type=\"email\"\n                                name=\"email\"\n                                fullWidth={true}\n                                variant=\"outlined\"\n                                placeholder=\"Email\"\n                                as={TextField}\n                            />\n\n                            <ErrorMessage component={TextError} name=\"email\" />\n                        </div>\n\n                        <div\n                            style={{marginBottom: 30}}\n                        >\n                            <Field\n                                type=\"password\"\n                                name=\"password\"\n                                fullWidth={true}\n                                variant=\"outlined\"\n                                placeholder=\"Password\"\n                                as={TextField}\n                            />\n\n                            <ErrorMessage component={TextError} name=\"password\" />\n\n                        </div>\n\n                        <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n                            Login\n                        </Button>\n\n                    </Form>\n                )}\n            </Formik>\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}